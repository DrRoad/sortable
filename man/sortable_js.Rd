% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sortable_js.R
\name{sortable_js}
\alias{sortable_js}
\title{Creates an htmlwidget with the 'sortable.js' library embedded.}
\usage{
sortable_js(selector, options = sortable_options(), width = 0,
  height = 0, element_id = NULL, pre_render_hook = NULL)
}
\arguments{
\item{selector}{\code{String} selector id on which to apply \code{sortable.js}.  Note, \code{sortable_js}
works with any html element, not just \code{ul/li}.}

\item{options}{Options to be supplied to \link{sortable_js} object. See \link{sortable_options} for more details}

\item{width}{\code{integer} width in pixels.  Since the container is expected
to not be displayed, \code{0} is the default.}

\item{height}{\code{integer} height in pixels.  Since the container is expected
to not be displayed, \code{0} is the default.}

\item{element_id}{Passed to \link[htmlwidgets:createWidget]{htmlwidgets::createWidget}}

\item{pre_render_hook}{Passed to \link[htmlwidgets:createWidget]{htmlwidgets::createWidget}}
}
\description{
Creates an \code{htmlwidget} that provides \href{https://github.com/SortableJS/Sortable}{Sortable.js}
to use for drag-and-drop interactivity in Shiny apps and R Markdown.
}
\examples{
## -- example-sortable-js -------------------------------------------------
# Simple example of sortable.
# Important: set the tags CSS `id` equal to the sortable `selector`

if (require(htmltools)) {
  html_print(
    tagList(
      tags$p("You can drag and reorder the items in this list:"),
      tags$ul(
        id = "example_1",
        tags$li("Move"),
        tags$li("Or drag"),
        tags$li("Each of the items"),
        tags$li("To different positions")
      ),
      sortable_js(selector = "example_1")
    )
  )
}

}
\seealso{
\code{\link[=sortable_options]{sortable_options()}}
}
